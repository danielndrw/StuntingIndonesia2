# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zYTQrzw4n6dTT3PZ44hCY9qsoNeg4k8d
"""

# ================================================================
# STREAMLIT APP — DASHBOARD STUNTING INDONESIA (FULL + VISUAL)
# Sinkron dengan training pipeline yang kamu kirim
# ================================================================

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import joblib, os, json, requests, re

# -----------------------------
# CONFIG
# -----------------------------
st.set_page_config(page_title="📊 Dashboard Stunting Indonesia", layout="wide")
st.title("🇮🇩 Dashboard Analisis Stunting Indonesia")
st.markdown("### Clustering, Klasifikasi, dan Prediksi Stunting berbasis Data Sosial Ekonomi")
st.markdown("---")

# ================================================================
# 0) UTIL: KOORDINAT, NORMALISASI PROVINSI, GEOJSON & PETA
# ================================================================
PROV_COORDS = {
    "ACEH": (4.70, 96.75), "SUMATERA UTARA": (2.11, 99.55), "SUMATERA BARAT": (-0.74, 100.80),
    "RIAU": (0.29, 101.71), "KEPULAUAN RIAU": (0.92, 104.45), "JAMBI": (-1.61, 103.61),
    "SUMATERA SELATAN": (-3.32, 104.91), "BENGKULU": (-3.58, 102.35), "LAMPUNG": (-4.56, 105.41),
    "KEP. BANGKA BELITUNG": (-2.74, 106.44), "BANTEN": (-6.41, 106.06), "DKI JAKARTA": (-6.17, 106.83),
    "JAWA BARAT": (-6.89, 107.64), "JAWA TENGAH": (-7.15, 110.14), "D I YOGYAKARTA": (-7.79, 110.37),
    "JAWA TIMUR": (-7.54, 112.24), "BALI": (-8.34, 115.09), "NUSA TENGGARA BARAT": (-8.65, 117.36),
    "NUSA TENGGARA TIMUR": (-8.66, 121.08), "KALIMANTAN BARAT": (-0.13, 111.10), "KALIMANTAN TENGAH": (-1.68, 113.38),
    "KALIMANTAN SELATAN": (-3.09, 115.28), "KALIMANTAN TIMUR": (0.54, 116.42), "KALIMANTAN UTARA": (2.84, 117.39),
    "SULAWESI UTARA": (1.49, 124.84), "GORONTALO": (0.70, 122.45), "SULAWESI TENGAH": (-1.43, 121.45),
    "SULAWESI BARAT": (-2.84, 119.23), "SULAWESI SELATAN": (-3.67, 119.97), "SULAWESI TENGGARA": (-4.14, 122.17),
    "MALUKU": (-3.24, 130.15), "MALUKU UTARA": (1.57, 127.81), "PAPUA": (-4.27, 138.08),
    "PAPUA BARAT": (-1.34, 133.17), "PAPUA BARAT DAYA": (-0.88, 131.26),
    "PAPUA PEGUNUNGAN": (-4.10, 138.94), "PAPUA SELATAN": (-8.49, 140.40), "PAPUA TENGAH": (-3.36, 135.50)
}

def normalize_province(name: str) -> str | None:
    if pd.isna(name):
        return None
    s = str(name).upper().strip()
    s = re.sub(r"(PROVINSI|PROPINSI|DAERAH ISTIMEWA|KOTA|KAB\.?)", "", s)
    s = re.sub(r"[^A-Z\s]", "", s)
    s = re.sub(r"\s+", " ", s).strip()
    # alias umum
    aliases = {
        "DAERAH KHUSUS IBUKOTA JAKARTA": "DKI JAKARTA",
        "DI YOGYAKARTA": "D I YOGYAKARTA",
        "DAERAH ISTIMEWA YOGYAKARTA": "D I YOGYAKARTA",
        "KEPULAUAN BANGKA BELITUNG": "KEP. BANGKA BELITUNG",
        "BANGKA BELITUNG": "KEP. BANGKA BELITUNG",
    }
    return aliases.get(s, s)

@st.cache_data
def load_geojson():
    urls = [
        "https://raw.githubusercontent.com/superpikar/indonesia-geojson/master/indonesia-prov.geojson",
        "https://raw.githubusercontent.com/superpikar/indonesia-geojson/master/indonesia-province.geojson",
    ]
    for url in urls:
        try:
            r = requests.get(url, timeout=10)
            r.raise_for_status()
            gj = r.json()
            if isinstance(gj, dict) and gj.get("type") == "FeatureCollection":
                st.success("🌍 GeoJSON provinsi dimuat.")
                return gj
        except Exception:
            continue
    st.warning("❌ GeoJSON gagal dimuat — fallback ke peta titik.")
    return None

def ensure_geo_columns(df_in: pd.DataFrame) -> pd.DataFrame:
    dfp = df_in.copy()
    dfp["Provinsi"] = dfp["Provinsi"].astype(str)
    dfp["prov_up"] = dfp["Provinsi"].map(normalize_province)
    dfp["lat"] = dfp["prov_up"].map(lambda p: PROV_COORDS.get(p, (np.nan, np.nan))[0])
    dfp["lon"] = dfp["prov_up"].map(lambda p: PROV_COORDS.get(p, (np.nan, np.nan))[1])
    if dfp["lat"].isna().all():
        st.warning("⚠️ Nama provinsi tidak cocok — tampilkan titik acak sementara.")
        dfp["lat"] = np.random.uniform(-7, 2, size=len(dfp))
        dfp["lon"] = np.random.uniform(100, 125, size=len(dfp))
    return dfp

def draw_map(df_map: pd.DataFrame, color_col: str, title: str, geojson=None,
             discrete: bool = False, discrete_map: dict | None = None):
    dfp = ensure_geo_columns(df_map)
    # coba choropleth dulu jika geojson ada
    if geojson is not None:
        try:
            fig = px.choropleth(
                dfp,
                geojson=geojson,
                featureidkey="properties.Propinsi",
                locations="Provinsi",
                color=color_col,
                color_discrete_map=(discrete_map or {}) if discrete else None,
                color_continuous_scale=None if discrete else "RdYlGn_r",
                title=title,
            )
            fig.update_geos(fitbounds="locations", visible=False)
            st.plotly_chart(fig, use_container_width=True)
            return
        except Exception:
            st.info("ℹ️ Choropleth gagal dicocokkan — fallback ke peta titik.")
    # scatter_geo fallback
    if discrete:
        fig = px.scatter_geo(
            dfp, lat="lat", lon="lon", color=color_col, hover_name="Provinsi",
            color_discrete_map=discrete_map or {}, title=title
        )
    else:
        fig = px.scatter_geo(
            dfp, lat="lat", lon="lon", color=color_col, hover_name="Provinsi",
            color_continuous_scale="RdYlGn_r", title=title
        )
    fig.update_geos(fitbounds="locations", showcountries=True)
    st.plotly_chart(fig, use_container_width=True)

# ================================================================
# 1) LOAD DATA + (opsional) UPLOAD
# ================================================================
@st.cache_data
def load_default_data():
    return pd.read_excel("DATA_SUM_STUNTING.xlsx")

df = load_default_data()

st.sidebar.subheader("📤 Upload Dataset Baru (Opsional)")
up = st.sidebar.file_uploader("Pilih file Excel (.xlsx)", type=["xlsx"])
if up is not None:
    df = pd.read_excel(up)
    st.sidebar.success("✅ Data berhasil dimuat dari upload.")

# Validasi kolom minimal
required_cols = [
    'Provinsi','Years','Angka_Harapan_Hidup','Akses_Sanitasi_Layak','Akses_Air_Layak','Air_Kemasan',
    'IPM','Konsumsi_Pangan_Tidak_Cukup','Jumlah_KPM_Bansos','Anggaran_Bansos','Melek_Aksara',
    'Tingkat_Pengangguran','Imunisasi_Lengkap','Stunting','Lama_Sekolah','Garis_Kemiskinan_Makanan',
    'Kedalaman_Kemiskinan'
]
missing = [c for c in required_cols if c not in df.columns]
if missing:
    st.error(f"❌ Dataset tidak lengkap. Kolom hilang: {missing}")
    st.stop()

# ================================================================
# 2) FEATURE ENGINEERING (SAMA DENGAN TRAINING)
# ================================================================
def feature_engineering(dfin: pd.DataFrame) -> pd.DataFrame:
    d = dfin.copy()
    # convert object numerik
    for c in d.columns:
        if d[c].dtype == object and c != "Provinsi":
            d[c] = d[c].replace(",", ".", regex=True)
            d[c] = pd.to_numeric(d[c], errors="ignore")
    # transformasi log
    d['log_Anggaran_Bansos'] = np.log1p(d['Anggaran_Bansos'])
    d['log_Jumlah_KPM_Bansos'] = np.log1p(d['Jumlah_KPM_Bansos'])
    d['log_Garis_Kemiskinan_Makanan'] = np.log1p(d['Garis_Kemiskinan_Makanan'])
    # interaksi & rasio
    d['IPM_x_LamaSekolah']   = d['IPM'] * d['Lama_Sekolah']
    d['AksesGabungan']        = d['Akses_Air_Layak'] * d['Akses_Sanitasi_Layak']
    d['Pengangguran_per_IPM'] = d['Tingkat_Pengangguran'] / (d['IPM'] + 1e-6)
    d['Bansos_per_KPM']       = np.where(d['Jumlah_KPM_Bansos'] > 0,
                                         d['Anggaran_Bansos'] / d['Jumlah_KPM_Bansos'],
                                         d['Anggaran_Bansos'])
    d['Konsumsi_vs_IPM']      = d['Konsumsi_Pangan_Tidak_Cukup'] / (d['IPM'] + 1e-6)
    # imputasi ringan
    num_cols = d.select_dtypes(include=[np.number]).columns
    d[num_cols] = d[num_cols].fillna(d[num_cols].median())
    return d

df = feature_engineering(df)

# ================================================================
# 3) LOAD MODELS + METADATA FITUR (DARI TRAINING)
# ================================================================
@st.cache_resource
def load_models_and_meta():
    cluster = joblib.load("models/cluster_model.pkl")              # Pipeline(StandardScaler->KMeans)
    clf     = joblib.load("models/classification_model.pkl")       # RandomForestClassifier
    reg     = joblib.load("models/regression_model.pkl")           # XGBRegressor
    with open("models/expected_features.json", "r", encoding="utf-8") as f:
        meta = json.load(f)
    return cluster, clf, reg, meta

cluster_model, clf_model, reg_model, meta = load_models_and_meta()
FEATURES_BASE = meta.get("features_base", [])
FEATURES_ALL  = meta.get("features_all", [])

# ================================================================
# 4) GEOJSON (opsional, fallback ke scatter)
# ================================================================
geojson = load_geojson()

# ================================================================
# 5) GLOBAL FILTERS (Years & cari provinsi)
# ================================================================
with st.sidebar.expander("🔎 Filter Data"):
    years_avail = sorted(df['Years'].dropna().unique().tolist())
    pilih_tahun = st.multiselect("Pilih Years", years_avail, default=years_avail)
    cari = st.text_input("Cari Provinsi (opsional)", "").strip()

df_view = df.copy()
if pilih_tahun:
    df_view = df_view[df_view['Years'].isin(pilih_tahun)]
if cari:
    df_view = df_view[df_view['Provinsi'].astype(str).str.contains(cari, case=False, na=False)]

# ================================================================
# 6) VISUAL HELPERS (non-metrics, no evaluation)
# ================================================================
ALL_FEATURES_BASE = [
    'IPM','Akses_Sanitasi_Layak','Akses_Air_Layak','Air_Kemasan',
    'Konsumsi_Pangan_Tidak_Cukup','Jumlah_KPM_Bansos','Anggaran_Bansos',
    'Melek_Aksara','Tingkat_Pengangguran','Imunisasi_Lengkap',
    'Lama_Sekolah','Garis_Kemiskinan_Makanan','Kedalaman_Kemiskinan'
]

def plot_top_bottom(df_in, value_col, n=10, ascending=True, title=""):
    d = df_in[['Provinsi', value_col]].dropna().copy()
    d = d.sort_values(value_col, ascending=ascending)
    top = d.head(n)
    fig = px.bar(
        top, x=value_col, y='Provinsi', orientation='h',
        title=title, text=value_col, height=max(400, 20*len(top))
    )
    fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    fig.update_layout(yaxis={'categoryorder':'total ascending'})
    st.plotly_chart(fig, use_container_width=True)
    return top

def plot_national_trend(df_in):
    g = df_in.groupby('Years', as_index=False)[['Stunting','Angka_Harapan_Hidup']].mean()
    c1, c2 = st.columns(2)
    with c1:
        fig1 = px.line(g, x='Years', y='Stunting', markers=True,
                       title='📉 Rata-rata Nasional Stunting per Tahun')
        st.plotly_chart(fig1, use_container_width=True)
    with c2:
        fig2 = px.line(g, x='Years', y='Angka_Harapan_Hidup', markers=True,
                       title='📈 Rata-rata Nasional AHH per Tahun')
        st.plotly_chart(fig2, use_container_width=True)

def plot_feature_importance(model, feature_names, title):
    if hasattr(model, "feature_importances_"):
        fi = pd.Series(model.feature_importances_, index=feature_names).sort_values(ascending=True).tail(20)
        fig = px.bar(
            fi, x=fi.values, y=fi.index, orientation='h',
            title=title, labels={'x':'Importance','y':'Feature'}
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("ℹ️ Model ini tidak memiliki `feature_importances_`.")

def plot_distributions(df_in, cols, title="Distribusi Fitur"):
    cols = [c for c in cols if c in df_in.columns]
    if not cols:
        st.info("ℹ️ Tidak ada kolom numerik untuk ditampilkan.")
        return
    tab = st.tabs([title])[0]
    with tab:
        for c in cols:
            fig = px.histogram(df_in, x=c, nbins=30, marginal='box', title=f"Distribusi: {c}")
            st.plotly_chart(fig, use_container_width=True)

def plot_scatter_against_target(df_in, target, features):
    features = [f for f in features if f in df_in.columns and f != target]
    if not features:
        st.info("ℹ️ Tidak ada fitur yang valid untuk scatter.")
        return
    for f in features:
        fig = px.scatter(
            df_in, x=f, y=target, hover_name='Provinsi',
            trendline=None, title=f"{f} vs {target}", opacity=0.75
        )
        st.plotly_chart(fig, use_container_width=True)

def plot_cluster_profile(df_in, label_col, features=ALL_FEATURES_BASE):
    if label_col not in df_in.columns:
        st.info("ℹ️ Label cluster belum tersedia.")
        return
    feats = [c for c in features if c in df_in.columns]
    if not feats:
        st.info("ℹ️ Tidak ada fitur numerik untuk profil cluster.")
        return
    prof = df_in.groupby(label_col)[feats].mean()
    prof_norm = (prof - prof.min()) / (prof.max() - prof.min() + 1e-9)
    prof_norm = prof_norm.reset_index().melt(id_vars=label_col, var_name='Fitur', value_name='Skor')
    fig = px.line_polar(
        prof_norm, r='Skor', theta='Fitur', color=label_col, line_close=True,
        markers=True, title='🧭 Profil Rata-rata Cluster (scaled 0–1)'
    )
    st.plotly_chart(fig, use_container_width=True)

def show_basic_counts(df_in, by_col):
    if by_col not in df_in.columns:
        return
    ct = df_in[by_col].value_counts(dropna=False).reset_index()
    ct.columns = [by_col, "Count"]
    fig = px.bar(ct, x=by_col, y='Count', title=f"📦 Jumlah per {by_col}")
    st.plotly_chart(fig, use_container_width=True)

# ================================================================
# 7) SIDEBAR MODE
# ================================================================
st.sidebar.title("📁 Pilih Fitur Analisis")
mode = st.sidebar.radio(
    "Mode:",
    ["🧭 Clustering", "🏥 Klasifikasi Kesehatan", "📈 Prediksi Stunting (Tahun Depan)"]
)

# ================================================================
# 8) MODES DENGAN VISUAL LENGKAP
# ================================================================
if mode == "🧭 Clustering":
    st.subheader("🧭 Clustering Tingkat Kerentanan Stunting per Provinsi")
    try:
        Xc = df_view[FEATURES_BASE].copy()
        labels = cluster_model.predict(Xc)
        vis = df_view.copy()
        vis["Cluster"] = labels
        cluster_map = {0: "Sejahtera (Maju)", 1: "Sedang (Mainstream)", 2: "Rentan (Tertinggal)"}
        vis["Kategori_Cluster"] = vis["Cluster"].map(cluster_map)

        tabs = st.tabs(["🗺️ Peta", "📦 Ringkasan", "🧭 Profil Cluster", "🏆 Ranking", "📊 Trend Nasional"])
        with tabs[0]:
            draw_map(
                vis, "Kategori_Cluster", "🗺️ Clustering Kerentanan Stunting",
                geojson=geojson, discrete=True,
                discrete_map={"Sejahtera (Maju)": "green", "Sedang (Mainstream)": "orange", "Rentan (Tertinggal)": "red"}
            )
        with tabs[1]:
            show_basic_counts(vis, "Kategori_Cluster")
            st.dataframe(
                vis[["Provinsi","Years","Kategori_Cluster","Stunting"]]
                .sort_values(["Kategori_Cluster","Stunting"]).reset_index(drop=True),
                use_container_width=True
            )
        with tabs[2]:
            plot_cluster_profile(vis, "Kategori_Cluster", features=ALL_FEATURES_BASE)
        with tabs[3]:
            c1, c2 = st.columns(2)
            with c1:
                plot_top_bottom(vis, value_col="Stunting", n=10, ascending=True, title="🏆 10 Provinsi Stunting Terendah")
            with c2:
                plot_top_bottom(vis, value_col="Stunting", n=10, ascending=False, title="⚠️ 10 Provinsi Stunting Tertinggi")
        with tabs[4]:
            plot_national_trend(vis)

    except Exception as e:
        st.error(f"❌ Gagal menjalankan clustering: {e}")

elif mode == "🏥 Klasifikasi Kesehatan":
    st.subheader("🏥 Klasifikasi Daerah Sehat vs Tidak Sehat")
    try:
        X = df_view[FEATURES_ALL].copy()
        y_pred = clf_model.predict(X)
        vis = df_view.copy()
        vis["Prediksi_Sehat"] = np.where(y_pred == 1, "Sehat", "Tidak Sehat")

        tabs = st.tabs(["🗺️ Peta", "📦 Ringkasan", "🌿 Feature Importance", "🏆 Ranking", "📊 Trend Nasional"])
        with tabs[0]:
            draw_map(
                vis, "Prediksi_Sehat", "🗺️ Daerah Sehat vs Tidak Sehat",
                geojson=geojson, discrete=True, discrete_map={"Sehat": "green", "Tidak Sehat": "red"}
            )
        with tabs[1]:
            show_basic_counts(vis, "Prediksi_Sehat")
            st.dataframe(
                vis[["Provinsi","Years","Prediksi_Sehat","Stunting","Angka_Harapan_Hidup"]]
                .sort_values(["Prediksi_Sehat","Stunting"]).reset_index(drop=True),
                use_container_width=True
            )
        with tabs[2]:
            plot_feature_importance(clf_model, FEATURES_ALL, "🌿 Pentingnya Fitur untuk Klasifikasi (RF)")
        with tabs[3]:
            c1, c2 = st.columns(2)
            with c1:
                plot_top_bottom(vis, value_col="Angka_Harapan_Hidup", n=10, ascending=False, title="🏆 10 Provinsi AHH Tertinggi")
            with c2:
                plot_top_bottom(vis, value_col="Angka_Harapan_Hidup", n=10, ascending=True,  title="⚠️ 10 Provinsi AHH Terendah")
        with tabs[4]:
            plot_national_trend(vis)

    except Exception as e:
        st.error(f"❌ Gagal menjalankan klasifikasi: {e}")

else:
    st.subheader("📈 Prediksi Stunting Tahun Depan")
    try:
        X = df_view[FEATURES_ALL].copy()
        y_next = reg_model.predict(X)
        vis = df_view.copy()
        vis["Prediksi_Stunting_TahunDepan"] = y_next

        tabs = st.tabs(["🗺️ Peta", "🏆 Ranking Prediksi", "📦 Distribusi Prediksi", "🌿 Feature Importance", "🔬 Scatter Sosio-Eko vs Stunting"])
        with tabs[0]:
            draw_map(
                vis, "Prediksi_Stunting_TahunDepan", "🗺️ Prediksi Stunting Tahun Depan (%)",
                geojson=geojson, discrete=False
            )
        with tabs[1]:
            c1, c2 = st.columns(2)
            with c1:
                plot_top_bottom(vis, value_col="Prediksi_Stunting_TahunDepan", n=10, ascending=True, title="🏆 10 Provinsi Prediksi Stunting Terendah")
            with c2:
                plot_top_bottom(vis, value_col="Prediksi_Stunting_TahunDepan", n=10, ascending=False, title="⚠️ 10 Provinsi Prediksi Stunting Tertinggi")
            st.dataframe(
                vis[["Provinsi","Years","Prediksi_Stunting_TahunDepan"]]
                .sort_values("Prediksi_Stunting_TahunDepan")
                .reset_index(drop=True),
                use_container_width=True
            )
        with tabs[2]:
            plot_distributions(vis, ["Prediksi_Stunting_TahunDepan"], title="Distribusi Prediksi Stunting")
        with tabs[3]:
            plot_feature_importance(reg_model, FEATURES_ALL, "🌿 Pentingnya Fitur untuk Prediksi (XGB)")
        with tabs[4]:
            pilih = st.multiselect("Pilih faktor untuk scatter vs Stunting", ALL_FEATURES_BASE,
                                   default=["IPM","Akses_Sanitasi_Layak","Akses_Air_Layak"])
            plot_scatter_against_target(df_view, target="Stunting", features=pilih)

    except Exception as e:
        st.error(f"❌ Gagal menjalankan prediksi: {e}")